@using BlazingBlog.Data.Entities
@inject ICategoryService CategoryService

<nav class="topnav navbar navbar-expand-lg navbar-light bg-white fixed-top">
<div class="container">
	<a class="navbar-brand" href="/"><strong>Blazing Blog</strong></a>
	<button class="navbar-toggler collapsed" type="button"  aria-controls="navbarColor02" aria-expanded="false" aria-label="Toggle navigation"
				onclick="toggleMenu(event)">
	<span class="navbar-toggler-icon"></span>
	</button>
	<div class="navbar-collapse collapse" id="top-navbar-menu-wrapper" style="">
		<ul class="navbar-nav mr-auto d-flex align-items-center">
			<li class="nav-item">
			<a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
			</li>
			@foreach(var c in _categories)
			{
					<li class="nav-item">
						<a class="nav-link" href="category">@c.Name</a>
					</li>
			}
		</ul>
		<ul class="navbar-nav ml-auto d-flex align-items-center">		
			<AuthorizeView>
				<Authorized>
					<li class="nav-item">
						<a class="nav-link" href="admin/dashboard">@context.User.GetUserName()</a>
					</li>
					<li class="nav-item highlight">
						<LogoutForm ButtonClasses="nav-link"></LogoutForm>
					</li>
				</Authorized>
				<NotAuthorized>
					<li class="nav-item highlight">
						<a class="nav-link" href="account/login">Login</a>
					</li>
				</NotAuthorized>

			</AuthorizeView>
		</ul>
	</div>
</div>
</nav>
@code {
	private Category[] _categories = [];

	private const int MaxCategoreisToShowOnNavbar = 5;
	protected override async Task OnInitializedAsync()
	{
		var categories = await CategoryService.GetCategoriesAsync();

		_categories = categories.Where(categories=> categories.ShowOnNavbar)	
															.Take(5)
															.ToArray();

		if(_categories.Length < MaxCategoreisToShowOnNavbar)
		{
			_categories = [.. _categories, .. categories.Where(c => !c.ShowOnNavbar).Take(MaxCategoreisToShowOnNavbar - _categories.Length)];

		}

	}
}
