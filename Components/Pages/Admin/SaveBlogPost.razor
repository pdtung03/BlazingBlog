@page "/admin/manage-blog-posts/new"
@page "/admin/manage-blog-posts/edit/{id:int?}"

@using BlazingBlog.Data.Entities
@using Blazored.TextEditor

@rendermode  InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IBlogPostAdminService BlogPostService
@inject ICategoryService CategoryService
@inject IWebHostEnvironment WebHostEnvironment
@inject NavigationManager NavigationManager

<PageTitle>@Utils.GetPageTitle(PageTitle)</PageTitle>

<HeadContent>
    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link href="//cdn.quilljs.com/1.3.6/quill.bubble.css" rel="stylesheet">
</HeadContent>
<Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="scripts">
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="_content/Blazored.TextEditor/quill-blot-formatter.min.js"></script>
    <script src="_content/Blazored.TextEditor/Blazored-BlazorQuill.js"></script>
</Microsoft.AspNetCore.Components.Sections.SectionContent>

<AdminHeader Title="@PageTitle">
    <ActionButtons>
        <NavLink href="/admin/manage-blog-posts" class="btn btn-sm btn-primary">Go Back</NavLink>
    </ActionButtons>
</AdminHeader>


@if (_isLoading)
{
    <Loader LoaderText="@_loadingText"></Loader>
}

<EditForm Model="_model"  OnValidSubmit="SaveBlogPostAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="row">
        <div class="col-sm-6">
            <div class="mb-3">
                <label class="form-label">Title</label>
                <InputText @bind-Value="_model.Title" class="form-control form-control-sm" placeholder="Blog post title"/>
                <ValidationMessage For="() => _model.Title" class="text-danger"/>
            </div>
            <div class="mb-3">
                <label class="form-label">Category</label>
                <InputSelect @bind-Value="_model.CategoryId" class="form-control form-control-sm" >
                    <option value="0">Select Category</option>
                    @foreach(var c in _categories)
                    {
                        <option value="@c.Id">@c.Name</option>
                    })
                </InputSelect>
                <ValidationMessage For="() => _model.CategoryId" class="text-danger"/>
            </div>
            <div class="mb-3">
                <label class="form-label">Introduction</label>
                <InputText @bind-Value="_model.Introduction" class="form-control form-control-sm" placeholder="Blog post introduction"/>
                <ValidationMessage For="() => _model.Introduction" class="text-danger"/>
            </div>
                @if(!string.IsNullOrWhiteSpace(_imageUrl))
                {
                <div class="mb-3">
                    <img src="@_imageUrl"  style="max-height: 200px"/>
                </div>
                }
            
            <div class="mb-3">
                <label class="form-label d-block">Upload Image</label>
                <InputFile OnChange="HandleFileUploadAsync"></InputFile>
            </div>
            <div class="mb-3">
                <label class="form-label ml-3">
                    <InputCheckbox @bind-Value="_model.isFeatured" class="form-check-input"></InputCheckbox>
                    Featured?
                </label>
            </div>
            <div class="mb-3">
                <label class="form-label ml-3">
                    <InputCheckbox @bind-Value="_model.isPublished" class="form-check-input"></InputCheckbox>
                    Published?
                </label>
            </div>
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="mb-3">
                    <p class="text-danger">@_errorMessage</p>
                    </div>
            }
            <div class="mb-3">
                <button type="submit" class="btn btn-success">Save</button>
            </div>
        </div>
        <div class="col-sm-6 d-flex">
            <div class="mb-3 flex-grow-1">
                        <label class="form-label">Content: </label>

                        <BlazoredTextEditor @ref="@quillHtml" Placeholder="Enter content...">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>
                        @((MarkupString)_model.Content)
                            </EditorContent>
                        </BlazoredTextEditor>

                        @* <ValidationMessage For="()=> _model.Content" /> *@
                    </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    private string PageTitle => Id.HasValue && Id > 0 ? "Update Blog Post" : "Create a new Blog Post";

    private bool _isLoading;
    private string? _loadingText;
    private BlogPost _model = new ();

    private Category[] _categories =[];

    private BlazoredTextEditor? quillHtml;
    private IBrowserFile? _fileToUpload;
    private string? _errorMessage;

    private string? _imageUrl;
    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoryService.GetCategoriesAsync();

        if(Id.HasValue && Id >0)
        {
            var blogPost = await BlogPostService.GetBlogPostByIdAsync(Id.Value);
            if(blogPost is null)
            {
                NavigationManager.NavigateTo("/admin/manage-blog-posts",replace:true);
                return;
            }
            _model = blogPost;
            _imageUrl = blogPost.Image;
        }
    }

    private async Task PreviewImageReview(IBrowserFile file)
    {
        var extension = Path.GetExtension(file.Name)[1..];
        using var imageStream = file.OpenReadStream();
        using MemoryStream ms = new();
        await imageStream.CopyToAsync(ms);

        _imageUrl = $"data:image/{extension};base64,{Convert.ToBase64String(ms.ToArray())}";
    }

    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e)
    {
        await PreviewImageReview(e.File);
        _fileToUpload = e.File;
    }

    private async Task<string?> SaveFileToDiscAsync(IBrowserFile browserFile)
    {
        var randomFileName = Path.GetRandomFileName();
        var extension = Path.GetExtension(browserFile.Name);

        //....\wwroot\images\posts
        var folderPath = Path.Combine(WebHostEnvironment.WebRootPath, "images","posts");
        Directory.CreateDirectory(folderPath);

        var fileNamePath = Path.Combine("images","posts",randomFileName + extension);

        var fullPath = Path.Combine(WebHostEnvironment.WebRootPath,fileNamePath);

        await using FileStream fs = new FileStream(fullPath, FileMode.Create);

        try
        {

            await browserFile.OpenReadStream().CopyToAsync(fs);

            return fileNamePath.Replace("\\","/");
        }
        catch(Exception ex)
        {
            _errorMessage = ex.Message;
            fs.Close();

            //throw
            return null;
        }
    }

    private void DeleteExistingImage(string imageUrl)
    {
        var imagePath = imageUrl.Replace("/", "\\");
        var fullPath = Path.Combine(WebHostEnvironment.WebRootPath, imagePath);
        try
        {
            File.Delete(fullPath);
        }
        catch{}
    }

    private async Task SaveBlogPostAsync()
    {
        try
        {
            var content = await quillHtml!.GetHTML();
            if (string.IsNullOrEmpty(content))
            {
                _errorMessage = "Content is required";
                return;
            }
            _model.Content = content;

            _loadingText = "Saving blog post";
            _isLoading = true;

            string? _imageUrlToDelete = null;

            if (_fileToUpload is not null)
            {
                var uploadedFileUrl = await SaveFileToDiscAsync(_fileToUpload);
                if (uploadedFileUrl is null)
                    return;

                if (_model.Id > 0 && !string.IsNullOrWhiteSpace(_model.Image))
                {
                    _imageUrlToDelete = _model.Image;
                }

                _model.Image = uploadedFileUrl;
            }


            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.GetUserId();

            await BlogPostService.SaveBlogPostAsync(_model, userId);
            _fileToUpload = null;

            if(_imageUrlToDelete is not null)
            {
                //we changed the image for this existing blog post
                // Lets remove the existing image from physical path
                DeleteExistingImage(_imageUrlToDelete);
            }

            // _isLoading = false;
            NavigationManager.NavigateTo("/admin/manage-blog-posts");
            await Task.Delay(1000);
            return;
        } 
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _isLoading = false;
        }
    }
}
